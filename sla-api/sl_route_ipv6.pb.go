// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sl_route_ipv6.proto

package service_layer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// IPv6 route
type SLRoutev6 struct {
	// IPv6 Prefix
	//0:: - ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
	Prefix []byte `protobuf:"bytes,1,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// IPv6 prefix length [0-128]
	PrefixLen uint32 `protobuf:"varint,2,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
	// Common route attributes
	RouteCommon *SLRouteCommon `protobuf:"bytes,3,opt,name=RouteCommon,proto3" json:"RouteCommon,omitempty"`
	// List of route paths for a particular route.
	// Specifying more than one path is allowed for ECMP/UCMP cases
	PathList             []*SLRoutePath `protobuf:"bytes,4,rep,name=PathList,proto3" json:"PathList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SLRoutev6) Reset()         { *m = SLRoutev6{} }
func (m *SLRoutev6) String() string { return proto.CompactTextString(m) }
func (*SLRoutev6) ProtoMessage()    {}
func (*SLRoutev6) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fb5856977b8d3f7, []int{0}
}

func (m *SLRoutev6) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SLRoutev6.Unmarshal(m, b)
}
func (m *SLRoutev6) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SLRoutev6.Marshal(b, m, deterministic)
}
func (m *SLRoutev6) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SLRoutev6.Merge(m, src)
}
func (m *SLRoutev6) XXX_Size() int {
	return xxx_messageInfo_SLRoutev6.Size(m)
}
func (m *SLRoutev6) XXX_DiscardUnknown() {
	xxx_messageInfo_SLRoutev6.DiscardUnknown(m)
}

var xxx_messageInfo_SLRoutev6 proto.InternalMessageInfo

func (m *SLRoutev6) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *SLRoutev6) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *SLRoutev6) GetRouteCommon() *SLRouteCommon {
	if m != nil {
		return m.RouteCommon
	}
	return nil
}

func (m *SLRoutev6) GetPathList() []*SLRoutePath {
	if m != nil {
		return m.PathList
	}
	return nil
}

// List of routes for bulk download
type SLRoutev6Msg struct {
	// Route Object Operations
	Oper SLObjectOp `protobuf:"varint,1,opt,name=Oper,proto3,enum=service_layer.SLObjectOp" json:"Oper,omitempty"`
	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,2,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// VRF name.
	VrfName string `protobuf:"bytes,3,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// List of routes for the VRF specified above
	Routes               []*SLRoutev6 `protobuf:"bytes,4,rep,name=Routes,proto3" json:"Routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SLRoutev6Msg) Reset()         { *m = SLRoutev6Msg{} }
func (m *SLRoutev6Msg) String() string { return proto.CompactTextString(m) }
func (*SLRoutev6Msg) ProtoMessage()    {}
func (*SLRoutev6Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fb5856977b8d3f7, []int{1}
}

func (m *SLRoutev6Msg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SLRoutev6Msg.Unmarshal(m, b)
}
func (m *SLRoutev6Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SLRoutev6Msg.Marshal(b, m, deterministic)
}
func (m *SLRoutev6Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SLRoutev6Msg.Merge(m, src)
}
func (m *SLRoutev6Msg) XXX_Size() int {
	return xxx_messageInfo_SLRoutev6Msg.Size(m)
}
func (m *SLRoutev6Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_SLRoutev6Msg.DiscardUnknown(m)
}

var xxx_messageInfo_SLRoutev6Msg proto.InternalMessageInfo

func (m *SLRoutev6Msg) GetOper() SLObjectOp {
	if m != nil {
		return m.Oper
	}
	return SLObjectOp_SL_OBJOP_RESERVED
}

func (m *SLRoutev6Msg) GetCorrelator() uint64 {
	if m != nil {
		return m.Correlator
	}
	return 0
}

func (m *SLRoutev6Msg) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLRoutev6Msg) GetRoutes() []*SLRoutev6 {
	if m != nil {
		return m.Routes
	}
	return nil
}

// IPv6 route result, uniquely identified by the Prefix/PrefixLen pair
type SLRoutev6Res struct {
	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// IPv6 Prefix
	Prefix []byte `protobuf:"bytes,2,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// IPv6 prefix length, [0-32]
	PrefixLen            uint32   `protobuf:"varint,3,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SLRoutev6Res) Reset()         { *m = SLRoutev6Res{} }
func (m *SLRoutev6Res) String() string { return proto.CompactTextString(m) }
func (*SLRoutev6Res) ProtoMessage()    {}
func (*SLRoutev6Res) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fb5856977b8d3f7, []int{2}
}

func (m *SLRoutev6Res) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SLRoutev6Res.Unmarshal(m, b)
}
func (m *SLRoutev6Res) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SLRoutev6Res.Marshal(b, m, deterministic)
}
func (m *SLRoutev6Res) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SLRoutev6Res.Merge(m, src)
}
func (m *SLRoutev6Res) XXX_Size() int {
	return xxx_messageInfo_SLRoutev6Res.Size(m)
}
func (m *SLRoutev6Res) XXX_DiscardUnknown() {
	xxx_messageInfo_SLRoutev6Res.DiscardUnknown(m)
}

var xxx_messageInfo_SLRoutev6Res proto.InternalMessageInfo

func (m *SLRoutev6Res) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *SLRoutev6Res) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *SLRoutev6Res) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

// IPv6 bulk route result status
type SLRoutev6MsgRsp struct {
	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// VRF name (matches the VRF name of the original operation)
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	// 1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//         In this case, the Results list is empty.
	// 2. SL_SOME_ERR: signifies that the operation failed for one or more
	//         entries. In this case, Results holds the result for
	//         each individual entry in the bulk.
	// 3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//         In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,3,opt,name=StatusSummary,proto3" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results              []*SLRoutev6Res `protobuf:"bytes,4,rep,name=Results,proto3" json:"Results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SLRoutev6MsgRsp) Reset()         { *m = SLRoutev6MsgRsp{} }
func (m *SLRoutev6MsgRsp) String() string { return proto.CompactTextString(m) }
func (*SLRoutev6MsgRsp) ProtoMessage()    {}
func (*SLRoutev6MsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fb5856977b8d3f7, []int{3}
}

func (m *SLRoutev6MsgRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SLRoutev6MsgRsp.Unmarshal(m, b)
}
func (m *SLRoutev6MsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SLRoutev6MsgRsp.Marshal(b, m, deterministic)
}
func (m *SLRoutev6MsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SLRoutev6MsgRsp.Merge(m, src)
}
func (m *SLRoutev6MsgRsp) XXX_Size() int {
	return xxx_messageInfo_SLRoutev6MsgRsp.Size(m)
}
func (m *SLRoutev6MsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SLRoutev6MsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SLRoutev6MsgRsp proto.InternalMessageInfo

func (m *SLRoutev6MsgRsp) GetCorrelator() uint64 {
	if m != nil {
		return m.Correlator
	}
	return 0
}

func (m *SLRoutev6MsgRsp) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLRoutev6MsgRsp) GetStatusSummary() *SLErrorStatus {
	if m != nil {
		return m.StatusSummary
	}
	return nil
}

func (m *SLRoutev6MsgRsp) GetResults() []*SLRoutev6Res {
	if m != nil {
		return m.Results
	}
	return nil
}

// Used to retrieve route attributes
type SLRoutev6GetMsg struct {
	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// VRF name.
	// If the Key is not specified, then request up to the first
	// 'EntriesCount' entries.
	VrfName string `protobuf:"bytes,2,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// IPv6 Prefix
	Prefix []byte `protobuf:"bytes,3,opt,name=Prefix,proto3" json:"Prefix,omitempty"`
	// IPv6 prefix length, [0-32]
	PrefixLen uint32 `protobuf:"varint,4,opt,name=PrefixLen,proto3" json:"PrefixLen,omitempty"`
	// Number of entries requested
	EntriesCount uint32 `protobuf:"varint,5,opt,name=EntriesCount,proto3" json:"EntriesCount,omitempty"`
	// if GetNext is FALSE:
	//     request up to 'EntriesCount' entries starting from the key
	// If GetNext is TRUE, or if the key exact match is not found:
	//     request up to 'EntriesCount' entries starting from the key's next
	GetNext              bool     `protobuf:"varint,6,opt,name=GetNext,proto3" json:"GetNext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SLRoutev6GetMsg) Reset()         { *m = SLRoutev6GetMsg{} }
func (m *SLRoutev6GetMsg) String() string { return proto.CompactTextString(m) }
func (*SLRoutev6GetMsg) ProtoMessage()    {}
func (*SLRoutev6GetMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fb5856977b8d3f7, []int{4}
}

func (m *SLRoutev6GetMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SLRoutev6GetMsg.Unmarshal(m, b)
}
func (m *SLRoutev6GetMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SLRoutev6GetMsg.Marshal(b, m, deterministic)
}
func (m *SLRoutev6GetMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SLRoutev6GetMsg.Merge(m, src)
}
func (m *SLRoutev6GetMsg) XXX_Size() int {
	return xxx_messageInfo_SLRoutev6GetMsg.Size(m)
}
func (m *SLRoutev6GetMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SLRoutev6GetMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SLRoutev6GetMsg proto.InternalMessageInfo

func (m *SLRoutev6GetMsg) GetCorrelator() uint64 {
	if m != nil {
		return m.Correlator
	}
	return 0
}

func (m *SLRoutev6GetMsg) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLRoutev6GetMsg) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *SLRoutev6GetMsg) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *SLRoutev6GetMsg) GetEntriesCount() uint32 {
	if m != nil {
		return m.EntriesCount
	}
	return 0
}

func (m *SLRoutev6GetMsg) GetGetNext() bool {
	if m != nil {
		return m.GetNext
	}
	return false
}

// Gt Route message response
type SLRoutev6GetMsgRsp struct {
	// Correlator. This can be used to correlate replies with requests.
	// The Server simply reflects this field back in the reply.
	Correlator uint64 `protobuf:"varint,1,opt,name=Correlator,proto3" json:"Correlator,omitempty"`
	// End Of File.
	// When set to True, it indicates that the server has returned M, where
	// M < N, of the original N requested Entries.
	Eof bool `protobuf:"varint,2,opt,name=Eof,proto3" json:"Eof,omitempty"`
	// VRF name.
	VrfName string `protobuf:"bytes,3,opt,name=VrfName,proto3" json:"VrfName,omitempty"`
	// Status of the Get operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,4,opt,name=ErrStatus,proto3" json:"ErrStatus,omitempty"`
	// Returned entries as requested in the Get operation.
	// if ErrStatus is SL_SUCCESS, Entries contains the info requested
	Entries              []*SLRoutev6 `protobuf:"bytes,5,rep,name=Entries,proto3" json:"Entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SLRoutev6GetMsgRsp) Reset()         { *m = SLRoutev6GetMsgRsp{} }
func (m *SLRoutev6GetMsgRsp) String() string { return proto.CompactTextString(m) }
func (*SLRoutev6GetMsgRsp) ProtoMessage()    {}
func (*SLRoutev6GetMsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fb5856977b8d3f7, []int{5}
}

func (m *SLRoutev6GetMsgRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SLRoutev6GetMsgRsp.Unmarshal(m, b)
}
func (m *SLRoutev6GetMsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SLRoutev6GetMsgRsp.Marshal(b, m, deterministic)
}
func (m *SLRoutev6GetMsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SLRoutev6GetMsgRsp.Merge(m, src)
}
func (m *SLRoutev6GetMsgRsp) XXX_Size() int {
	return xxx_messageInfo_SLRoutev6GetMsgRsp.Size(m)
}
func (m *SLRoutev6GetMsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SLRoutev6GetMsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SLRoutev6GetMsgRsp proto.InternalMessageInfo

func (m *SLRoutev6GetMsgRsp) GetCorrelator() uint64 {
	if m != nil {
		return m.Correlator
	}
	return 0
}

func (m *SLRoutev6GetMsgRsp) GetEof() bool {
	if m != nil {
		return m.Eof
	}
	return false
}

func (m *SLRoutev6GetMsgRsp) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLRoutev6GetMsgRsp) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *SLRoutev6GetMsgRsp) GetEntries() []*SLRoutev6 {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*SLRoutev6)(nil), "service_layer.SLRoutev6")
	proto.RegisterType((*SLRoutev6Msg)(nil), "service_layer.SLRoutev6Msg")
	proto.RegisterType((*SLRoutev6Res)(nil), "service_layer.SLRoutev6Res")
	proto.RegisterType((*SLRoutev6MsgRsp)(nil), "service_layer.SLRoutev6MsgRsp")
	proto.RegisterType((*SLRoutev6GetMsg)(nil), "service_layer.SLRoutev6GetMsg")
	proto.RegisterType((*SLRoutev6GetMsgRsp)(nil), "service_layer.SLRoutev6GetMsgRsp")
}

func init() { proto.RegisterFile("sl_route_ipv6.proto", fileDescriptor_2fb5856977b8d3f7) }

var fileDescriptor_2fb5856977b8d3f7 = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x5f, 0x8f, 0xd2, 0x4e,
	0x14, 0xcd, 0x2c, 0x2c, 0xbb, 0x5c, 0x96, 0xdf, 0x4f, 0x67, 0xfd, 0x53, 0xd7, 0x75, 0x53, 0x6b,
	0xa2, 0x8d, 0x89, 0x64, 0x83, 0x91, 0x07, 0x1f, 0x7c, 0x90, 0x20, 0x89, 0x61, 0x61, 0x1d, 0x74,
	0x13, 0xe3, 0x03, 0x29, 0x64, 0x40, 0x4c, 0x4b, 0x9b, 0x99, 0x81, 0x2c, 0x6f, 0x7e, 0x1d, 0x3f,
	0x81, 0xf1, 0xc9, 0x37, 0x9f, 0xfd, 0x48, 0x66, 0xa6, 0x2d, 0x4c, 0x81, 0x76, 0xd1, 0x7d, 0xa3,
	0xf7, 0x9e, 0x7b, 0xee, 0x39, 0xf7, 0xde, 0x16, 0x38, 0xe4, 0x6e, 0x8f, 0xf9, 0x53, 0x41, 0x7b,
	0xe3, 0x60, 0x56, 0xab, 0x04, 0xcc, 0x17, 0x3e, 0x2e, 0x73, 0xca, 0x66, 0xe3, 0x01, 0xed, 0xb9,
	0xce, 0x9c, 0xb2, 0xa3, 0xdb, 0xdc, 0xed, 0x0d, 0x7c, 0xcf, 0xf3, 0x27, 0x3d, 0x31, 0x0f, 0x28,
	0x0f, 0x51, 0x2a, 0x1c, 0x96, 0x86, 0xc9, 0x30, 0x6c, 0xfd, 0x40, 0x50, 0xec, 0xb6, 0x88, 0x4c,
	0xcc, 0x6a, 0xf8, 0x0e, 0x14, 0xce, 0x19, 0x1d, 0x8e, 0x2f, 0x0d, 0x64, 0x22, 0xfb, 0x80, 0x44,
	0x4f, 0xf8, 0x18, 0x8a, 0xe1, 0xaf, 0x16, 0x9d, 0x18, 0x3b, 0x26, 0xb2, 0xcb, 0x64, 0x19, 0xc0,
	0xaf, 0xa0, 0xa4, 0x08, 0xea, 0x8a, 0xd8, 0xc8, 0x99, 0xc8, 0x2e, 0x55, 0x8f, 0x2b, 0x09, 0x59,
	0x95, 0xa8, 0x49, 0x88, 0x21, 0x7a, 0x01, 0xae, 0xc1, 0xfe, 0xb9, 0x23, 0x3e, 0xb7, 0xc6, 0x5c,
	0x18, 0x79, 0x33, 0x67, 0x97, 0xaa, 0x47, 0x9b, 0x8b, 0x25, 0x8a, 0x2c, 0xb0, 0xd6, 0x37, 0x04,
	0x07, 0x0b, 0xed, 0x67, 0x7c, 0x84, 0x9f, 0x41, 0xbe, 0x13, 0x50, 0xa6, 0xc4, 0xff, 0x57, 0xbd,
	0xb7, 0x46, 0xd2, 0xe9, 0x7f, 0xa1, 0x03, 0xd1, 0x09, 0x88, 0x82, 0xe1, 0x13, 0x80, 0xba, 0xcf,
	0x18, 0x75, 0x1d, 0xe1, 0x33, 0x65, 0x2b, 0x4f, 0xb4, 0x08, 0x36, 0x60, 0xef, 0x82, 0x0d, 0xdb,
	0x8e, 0x47, 0x95, 0xa7, 0x22, 0x89, 0x1f, 0xf1, 0x29, 0x14, 0x54, 0x5b, 0x1e, 0xe9, 0x35, 0x36,
	0xeb, 0x9d, 0xd5, 0x48, 0x84, 0xb3, 0xbe, 0xea, 0x5a, 0x09, 0xe5, 0xf8, 0x25, 0x14, 0x1b, 0x8c,
	0x75, 0x85, 0x23, 0xa6, 0x5c, 0x09, 0xde, 0x34, 0xb2, 0x06, 0x63, 0x7e, 0x84, 0x21, 0x4b, 0xb8,
	0xb6, 0xa6, 0x9d, 0xf4, 0x35, 0xe5, 0x56, 0xd6, 0x64, 0xfd, 0x42, 0xf0, 0xbf, 0x3e, 0x2e, 0xc2,
	0x83, 0x95, 0x11, 0xa0, 0xac, 0x11, 0xec, 0x24, 0x47, 0xf0, 0x1a, 0xca, 0xa1, 0x9a, 0xee, 0xd4,
	0xf3, 0x1c, 0x36, 0x4f, 0x5d, 0xbb, 0xee, 0x21, 0x59, 0x82, 0x5f, 0xc0, 0x1e, 0xa1, 0x7c, 0xea,
	0x8a, 0x78, 0x8e, 0xf7, 0x53, 0xe7, 0x48, 0x39, 0x89, 0xb1, 0xd6, 0x4f, 0xdd, 0x48, 0x93, 0x0a,
	0xb9, 0xfa, 0x7f, 0x37, 0xb2, 0x1c, 0x66, 0x2e, 0x7d, 0x98, 0xf9, 0xd5, 0x9b, 0xb7, 0xe0, 0xa0,
	0x31, 0x11, 0x6c, 0x4c, 0x79, 0xdd, 0x9f, 0x4e, 0x84, 0xb1, 0xab, 0x00, 0x89, 0x98, 0xec, 0xd9,
	0xa4, 0xa2, 0x4d, 0x2f, 0x85, 0x51, 0x30, 0x91, 0xbd, 0x4f, 0xe2, 0x47, 0xeb, 0x37, 0x02, 0xbc,
	0xe2, 0x60, 0x9b, 0x6d, 0xdc, 0x80, 0x5c, 0xc3, 0x1f, 0x2a, 0x03, 0xfb, 0x44, 0xfe, 0xcc, 0x38,
	0xd1, 0xc4, 0x7d, 0xe5, 0xff, 0xee, 0xbe, 0xaa, 0xb0, 0x17, 0x19, 0x31, 0x76, 0xaf, 0xb8, 0xef,
	0x18, 0x58, 0xfd, 0x5e, 0x80, 0xf2, 0x22, 0xac, 0x5e, 0xaf, 0x3e, 0x1c, 0x2e, 0x3d, 0xba, 0x7e,
	0xdf, 0x71, 0x79, 0x93, 0x0a, 0xfc, 0x68, 0x33, 0xd7, 0x12, 0x71, 0xc6, 0x47, 0x47, 0x8f, 0xb7,
	0x00, 0xc9, 0x89, 0x4d, 0xe0, 0xee, 0x4a, 0x0f, 0x69, 0x41, 0xf5, 0x79, 0x92, 0x45, 0x11, 0xa3,
	0x64, 0xaf, 0xa7, 0x5b, 0x02, 0x65, 0xbf, 0x36, 0xdc, 0x5c, 0xf4, 0xbb, 0x60, 0x43, 0x42, 0x47,
	0x9d, 0x00, 0xaf, 0x7f, 0xad, 0xc2, 0x94, 0x24, 0x7f, 0x90, 0x9e, 0x93, 0x7c, 0x1f, 0xb4, 0x3b,
	0x08, 0x13, 0x52, 0x7a, 0x5a, 0x51, 0x24, 0xd8, 0xcc, 0x4c, 0x4b, 0xda, 0x8f, 0x70, 0x4b, 0xa7,
	0x6d, 0x52, 0xa1, 0x7c, 0x5c, 0x45, 0x6c, 0xad, 0xa7, 0xc9, 0x9b, 0xb8, 0x38, 0xa2, 0x7e, 0x0b,
	0x25, 0x6d, 0xcd, 0x38, 0xf5, 0x8d, 0x95, 0x7c, 0x27, 0x19, 0x49, 0xc9, 0xf5, 0x4e, 0xfb, 0x26,
	0x4a, 0xdf, 0xa9, 0xf8, 0x48, 0xdf, 0xc3, 0xec, 0xbc, 0xa4, 0x7c, 0xaf, 0x2d, 0xa8, 0x13, 0x74,
	0x05, 0xa3, 0x8e, 0x77, 0x2d, 0x91, 0x36, 0x3a, 0x45, 0xf8, 0x53, 0xf2, 0x75, 0x8d, 0x68, 0xaf,
	0x2f, 0x57, 0x92, 0xf7, 0x0b, 0xea, 0x9f, 0xf8, 0xf9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27,
	0x27, 0x99, 0x86, 0xdd, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SLRoutev6OperClient is the client API for SLRoutev6Oper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SLRoutev6OperClient interface {
	// Used to retrieve Global Route information
	SLRoutev6GlobalsGet(ctx context.Context, in *SLRouteGlobalsGetMsg, opts ...grpc.CallOption) (*SLRouteGlobalsGetMsgRsp, error)
	// Used to retrieve Global Route Stats
	SLRoutev6GlobalStatsGet(ctx context.Context, in *SLRouteGlobalStatsGetMsg, opts ...grpc.CallOption) (*SLRouteGlobalStatsGetMsgRsp, error)
	// SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
	//     VRF registration: Sends a list of VRF registration messages
	//     and expects a list of registration responses.
	//     A client Must Register a VRF BEFORE routes can be added/modified in
	//    the associated VRF.
	//
	// SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
	//     VRF Un-registeration: Sends a list of VRF un-registration messages
	//     and expects a list of un-registration responses.
	//     This can be used to convey that the client is no longer interested
	//     in this VRF. All previously installed routes would be lost.
	//
	// SLVrfRegMsg.Oper = SL_REGOP_EOF:
	//     VRF End Of File message.
	//     After Registration, the client is expected to send an EOF
	//     message to convey the end of replay of the client's known objects.
	//     This is especially useful under certain restart scenarios when the
	//     client and the server are trying to synchronize their Routes.
	SLRoutev6VrfRegOp(ctx context.Context, in *SLVrfRegMsg, opts ...grpc.CallOption) (*SLVrfRegMsgRsp, error)
	// VRF get. Used to retrieve VRF attributes from the server.
	SLRoutev6VrfRegGet(ctx context.Context, in *SLVrfRegGetMsg, opts ...grpc.CallOption) (*SLVrfRegGetMsgRsp, error)
	// Used to retrieve VRF Stats from the server.
	SLRoutev6VrfGetStats(ctx context.Context, in *SLVrfRegGetMsg, opts ...grpc.CallOption) (*SLVRFGetStatsMsgRsp, error)
	// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
	//     Route add. Fails if the route already exists.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
	//     Route update. Creates or updates the route.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
	//     Route delete. The route path is not necessary to delete the route.
	SLRoutev6Op(ctx context.Context, in *SLRoutev6Msg, opts ...grpc.CallOption) (*SLRoutev6MsgRsp, error)
	// Retrieves route attributes.
	SLRoutev6Get(ctx context.Context, in *SLRoutev6GetMsg, opts ...grpc.CallOption) (*SLRoutev6GetMsgRsp, error)
	// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
	//     Route add. Fails if the route already exists.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
	//     Route update. Creates or updates the route.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
	//     Route delete. The route path is not necessary to delete the route.
	SLRoutev6OpStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev6Oper_SLRoutev6OpStreamClient, error)
	// Retrieves route attributes.
	SLRoutev6GetStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev6Oper_SLRoutev6GetStreamClient, error)
}

type sLRoutev6OperClient struct {
	cc *grpc.ClientConn
}

func NewSLRoutev6OperClient(cc *grpc.ClientConn) SLRoutev6OperClient {
	return &sLRoutev6OperClient{cc}
}

func (c *sLRoutev6OperClient) SLRoutev6GlobalsGet(ctx context.Context, in *SLRouteGlobalsGetMsg, opts ...grpc.CallOption) (*SLRouteGlobalsGetMsgRsp, error) {
	out := new(SLRouteGlobalsGetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6GlobalsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6GlobalStatsGet(ctx context.Context, in *SLRouteGlobalStatsGetMsg, opts ...grpc.CallOption) (*SLRouteGlobalStatsGetMsgRsp, error) {
	out := new(SLRouteGlobalStatsGetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6GlobalStatsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6VrfRegOp(ctx context.Context, in *SLVrfRegMsg, opts ...grpc.CallOption) (*SLVrfRegMsgRsp, error) {
	out := new(SLVrfRegMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6VrfRegOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6VrfRegGet(ctx context.Context, in *SLVrfRegGetMsg, opts ...grpc.CallOption) (*SLVrfRegGetMsgRsp, error) {
	out := new(SLVrfRegGetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6VrfRegGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6VrfGetStats(ctx context.Context, in *SLVrfRegGetMsg, opts ...grpc.CallOption) (*SLVRFGetStatsMsgRsp, error) {
	out := new(SLVRFGetStatsMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6VrfGetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6Op(ctx context.Context, in *SLRoutev6Msg, opts ...grpc.CallOption) (*SLRoutev6MsgRsp, error) {
	out := new(SLRoutev6MsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6Op", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6Get(ctx context.Context, in *SLRoutev6GetMsg, opts ...grpc.CallOption) (*SLRoutev6GetMsgRsp, error) {
	out := new(SLRoutev6GetMsgRsp)
	err := c.cc.Invoke(ctx, "/service_layer.SLRoutev6Oper/SLRoutev6Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLRoutev6OperClient) SLRoutev6OpStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev6Oper_SLRoutev6OpStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SLRoutev6Oper_serviceDesc.Streams[0], "/service_layer.SLRoutev6Oper/SLRoutev6OpStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLRoutev6OperSLRoutev6OpStreamClient{stream}
	return x, nil
}

type SLRoutev6Oper_SLRoutev6OpStreamClient interface {
	Send(*SLRoutev6Msg) error
	Recv() (*SLRoutev6MsgRsp, error)
	grpc.ClientStream
}

type sLRoutev6OperSLRoutev6OpStreamClient struct {
	grpc.ClientStream
}

func (x *sLRoutev6OperSLRoutev6OpStreamClient) Send(m *SLRoutev6Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLRoutev6OperSLRoutev6OpStreamClient) Recv() (*SLRoutev6MsgRsp, error) {
	m := new(SLRoutev6MsgRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sLRoutev6OperClient) SLRoutev6GetStream(ctx context.Context, opts ...grpc.CallOption) (SLRoutev6Oper_SLRoutev6GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SLRoutev6Oper_serviceDesc.Streams[1], "/service_layer.SLRoutev6Oper/SLRoutev6GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sLRoutev6OperSLRoutev6GetStreamClient{stream}
	return x, nil
}

type SLRoutev6Oper_SLRoutev6GetStreamClient interface {
	Send(*SLRoutev6GetMsg) error
	Recv() (*SLRoutev6GetMsgRsp, error)
	grpc.ClientStream
}

type sLRoutev6OperSLRoutev6GetStreamClient struct {
	grpc.ClientStream
}

func (x *sLRoutev6OperSLRoutev6GetStreamClient) Send(m *SLRoutev6GetMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sLRoutev6OperSLRoutev6GetStreamClient) Recv() (*SLRoutev6GetMsgRsp, error) {
	m := new(SLRoutev6GetMsgRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SLRoutev6OperServer is the server API for SLRoutev6Oper service.
type SLRoutev6OperServer interface {
	// Used to retrieve Global Route information
	SLRoutev6GlobalsGet(context.Context, *SLRouteGlobalsGetMsg) (*SLRouteGlobalsGetMsgRsp, error)
	// Used to retrieve Global Route Stats
	SLRoutev6GlobalStatsGet(context.Context, *SLRouteGlobalStatsGetMsg) (*SLRouteGlobalStatsGetMsgRsp, error)
	// SLVrfRegMsg.Oper = SL_REGOP_REGISTER:
	//     VRF registration: Sends a list of VRF registration messages
	//     and expects a list of registration responses.
	//     A client Must Register a VRF BEFORE routes can be added/modified in
	//    the associated VRF.
	//
	// SLVrfRegMsg.Oper = SL_REGOP_UNREGISTER:
	//     VRF Un-registeration: Sends a list of VRF un-registration messages
	//     and expects a list of un-registration responses.
	//     This can be used to convey that the client is no longer interested
	//     in this VRF. All previously installed routes would be lost.
	//
	// SLVrfRegMsg.Oper = SL_REGOP_EOF:
	//     VRF End Of File message.
	//     After Registration, the client is expected to send an EOF
	//     message to convey the end of replay of the client's known objects.
	//     This is especially useful under certain restart scenarios when the
	//     client and the server are trying to synchronize their Routes.
	SLRoutev6VrfRegOp(context.Context, *SLVrfRegMsg) (*SLVrfRegMsgRsp, error)
	// VRF get. Used to retrieve VRF attributes from the server.
	SLRoutev6VrfRegGet(context.Context, *SLVrfRegGetMsg) (*SLVrfRegGetMsgRsp, error)
	// Used to retrieve VRF Stats from the server.
	SLRoutev6VrfGetStats(context.Context, *SLVrfRegGetMsg) (*SLVRFGetStatsMsgRsp, error)
	// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
	//     Route add. Fails if the route already exists.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
	//     Route update. Creates or updates the route.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
	//     Route delete. The route path is not necessary to delete the route.
	SLRoutev6Op(context.Context, *SLRoutev6Msg) (*SLRoutev6MsgRsp, error)
	// Retrieves route attributes.
	SLRoutev6Get(context.Context, *SLRoutev6GetMsg) (*SLRoutev6GetMsgRsp, error)
	// SLRoutev6Msg.Oper = SL_OBJOP_ADD:
	//     Route add. Fails if the route already exists.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_UPDATE:
	//     Route update. Creates or updates the route.
	//
	// SLRoutev6Msg.Oper = SL_OBJOP_DELETE:
	//     Route delete. The route path is not necessary to delete the route.
	SLRoutev6OpStream(SLRoutev6Oper_SLRoutev6OpStreamServer) error
	// Retrieves route attributes.
	SLRoutev6GetStream(SLRoutev6Oper_SLRoutev6GetStreamServer) error
}

func RegisterSLRoutev6OperServer(s *grpc.Server, srv SLRoutev6OperServer) {
	s.RegisterService(&_SLRoutev6Oper_serviceDesc, srv)
}

func _SLRoutev6Oper_SLRoutev6GlobalsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLRouteGlobalsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6GlobalsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6GlobalsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6GlobalsGet(ctx, req.(*SLRouteGlobalsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6GlobalStatsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLRouteGlobalStatsGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6GlobalStatsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6GlobalStatsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6GlobalStatsGet(ctx, req.(*SLRouteGlobalStatsGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6VrfRegOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLVrfRegMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6VrfRegOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6VrfRegOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6VrfRegOp(ctx, req.(*SLVrfRegMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6VrfRegGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLVrfRegGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6VrfRegGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6VrfRegGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6VrfRegGet(ctx, req.(*SLVrfRegGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6VrfGetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLVrfRegGetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6VrfGetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6VrfGetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6VrfGetStats(ctx, req.(*SLVrfRegGetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6Op_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLRoutev6Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6Op(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6Op",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6Op(ctx, req.(*SLRoutev6Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SLRoutev6GetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLRoutev6OperServer).SLRoutev6Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_layer.SLRoutev6Oper/SLRoutev6Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLRoutev6OperServer).SLRoutev6Get(ctx, req.(*SLRoutev6GetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLRoutev6Oper_SLRoutev6OpStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLRoutev6OperServer).SLRoutev6OpStream(&sLRoutev6OperSLRoutev6OpStreamServer{stream})
}

type SLRoutev6Oper_SLRoutev6OpStreamServer interface {
	Send(*SLRoutev6MsgRsp) error
	Recv() (*SLRoutev6Msg, error)
	grpc.ServerStream
}

type sLRoutev6OperSLRoutev6OpStreamServer struct {
	grpc.ServerStream
}

func (x *sLRoutev6OperSLRoutev6OpStreamServer) Send(m *SLRoutev6MsgRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLRoutev6OperSLRoutev6OpStreamServer) Recv() (*SLRoutev6Msg, error) {
	m := new(SLRoutev6Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SLRoutev6Oper_SLRoutev6GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SLRoutev6OperServer).SLRoutev6GetStream(&sLRoutev6OperSLRoutev6GetStreamServer{stream})
}

type SLRoutev6Oper_SLRoutev6GetStreamServer interface {
	Send(*SLRoutev6GetMsgRsp) error
	Recv() (*SLRoutev6GetMsg, error)
	grpc.ServerStream
}

type sLRoutev6OperSLRoutev6GetStreamServer struct {
	grpc.ServerStream
}

func (x *sLRoutev6OperSLRoutev6GetStreamServer) Send(m *SLRoutev6GetMsgRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sLRoutev6OperSLRoutev6GetStreamServer) Recv() (*SLRoutev6GetMsg, error) {
	m := new(SLRoutev6GetMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SLRoutev6Oper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service_layer.SLRoutev6Oper",
	HandlerType: (*SLRoutev6OperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SLRoutev6GlobalsGet",
			Handler:    _SLRoutev6Oper_SLRoutev6GlobalsGet_Handler,
		},
		{
			MethodName: "SLRoutev6GlobalStatsGet",
			Handler:    _SLRoutev6Oper_SLRoutev6GlobalStatsGet_Handler,
		},
		{
			MethodName: "SLRoutev6VrfRegOp",
			Handler:    _SLRoutev6Oper_SLRoutev6VrfRegOp_Handler,
		},
		{
			MethodName: "SLRoutev6VrfRegGet",
			Handler:    _SLRoutev6Oper_SLRoutev6VrfRegGet_Handler,
		},
		{
			MethodName: "SLRoutev6VrfGetStats",
			Handler:    _SLRoutev6Oper_SLRoutev6VrfGetStats_Handler,
		},
		{
			MethodName: "SLRoutev6Op",
			Handler:    _SLRoutev6Oper_SLRoutev6Op_Handler,
		},
		{
			MethodName: "SLRoutev6Get",
			Handler:    _SLRoutev6Oper_SLRoutev6Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SLRoutev6OpStream",
			Handler:       _SLRoutev6Oper_SLRoutev6OpStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SLRoutev6GetStream",
			Handler:       _SLRoutev6Oper_SLRoutev6GetStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sl_route_ipv6.proto",
}
